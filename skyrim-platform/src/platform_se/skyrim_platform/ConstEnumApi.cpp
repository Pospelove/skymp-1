// This file is generated by skyrim-platform/tools/const_enum_extractor

#include "ConstEnumApi.h"

void ConstEnumApi::Register(Napi::Env env, Napi::Object& exports,
                            std::shared_ptr<JsEngine> jsEngine)
{
  auto SpellType = Napi::Object::New(env);
  SpellType.Set(static_cast<uint32_t>(0), "Left");
  SpellType.Set(static_cast<uint32_t>(1), "Right");
  SpellType.Set(static_cast<uint32_t>(2), "Voise");
  SpellType.Set(static_cast<uint32_t>(3), "Instant");
  SpellType.Set("Left", Napi::Number::New(env, 0));
  SpellType.Set("Right", Napi::Number::New(env, 1));
  SpellType.Set("Voise", Napi::Number::New(env, 2));
  SpellType.Set("Instant", Napi::Number::New(env, 3));
  exports.Set("SpellType", SpellType);

  auto MarkerType = Napi::Object::New(env);
  MarkerType.Set(static_cast<uint32_t>(0), "None");
  MarkerType.Set(static_cast<uint32_t>(1), "City");
  MarkerType.Set(static_cast<uint32_t>(2), "Town");
  MarkerType.Set(static_cast<uint32_t>(3), "Settlement");
  MarkerType.Set(static_cast<uint32_t>(4), "Cave");
  MarkerType.Set(static_cast<uint32_t>(5), "Camp");
  MarkerType.Set(static_cast<uint32_t>(6), "Fort");
  MarkerType.Set(static_cast<uint32_t>(7), "NordicRuins");
  MarkerType.Set(static_cast<uint32_t>(8), "DwemerRuin");
  MarkerType.Set(static_cast<uint32_t>(9), "Shipwreck");
  MarkerType.Set(static_cast<uint32_t>(10), "Grove");
  MarkerType.Set(static_cast<uint32_t>(11), "Landmark");
  MarkerType.Set(static_cast<uint32_t>(12), "DragonLair");
  MarkerType.Set(static_cast<uint32_t>(13), "Farm");
  MarkerType.Set(static_cast<uint32_t>(14), "WoodMill");
  MarkerType.Set(static_cast<uint32_t>(15), "Mine");
  MarkerType.Set(static_cast<uint32_t>(16), "ImperialCamp");
  MarkerType.Set(static_cast<uint32_t>(17), "StormcloakCamp");
  MarkerType.Set(static_cast<uint32_t>(18), "Doomstone");
  MarkerType.Set(static_cast<uint32_t>(19), "WheatMill");
  MarkerType.Set(static_cast<uint32_t>(20), "Smelter");
  MarkerType.Set(static_cast<uint32_t>(21), "Stable");
  MarkerType.Set(static_cast<uint32_t>(22), "ImperialTower");
  MarkerType.Set(static_cast<uint32_t>(23), "Clearing");
  MarkerType.Set(static_cast<uint32_t>(24), "Pass");
  MarkerType.Set(static_cast<uint32_t>(25), "Alter");
  MarkerType.Set(static_cast<uint32_t>(26), "Rock");
  MarkerType.Set(static_cast<uint32_t>(27), "Lighthouse");
  MarkerType.Set(static_cast<uint32_t>(28), "OrcStronghold");
  MarkerType.Set(static_cast<uint32_t>(29), "GiantCamp");
  MarkerType.Set(static_cast<uint32_t>(30), "Shack");
  MarkerType.Set(static_cast<uint32_t>(31), "NordicTower");
  MarkerType.Set(static_cast<uint32_t>(32), "NordicDwelling");
  MarkerType.Set(static_cast<uint32_t>(33), "Docks");
  MarkerType.Set(static_cast<uint32_t>(34), "Shrine");
  MarkerType.Set(static_cast<uint32_t>(35), "RiftenCastle");
  MarkerType.Set(static_cast<uint32_t>(36), "RiftenCapitol");
  MarkerType.Set(static_cast<uint32_t>(37), "WindhelmCastle");
  MarkerType.Set(static_cast<uint32_t>(38), "WindhelmCapitol");
  MarkerType.Set(static_cast<uint32_t>(39), "WhiterunCastle");
  MarkerType.Set(static_cast<uint32_t>(40), "WhiterunCapitol");
  MarkerType.Set(static_cast<uint32_t>(41), "SolitudeCastle");
  MarkerType.Set(static_cast<uint32_t>(42), "SolitudeCapitol");
  MarkerType.Set(static_cast<uint32_t>(43), "MarkarthCastle");
  MarkerType.Set(static_cast<uint32_t>(44), "MarkarthCapitol");
  MarkerType.Set(static_cast<uint32_t>(45), "WinterholdCastle");
  MarkerType.Set(static_cast<uint32_t>(46), "WinterholdCapitol");
  MarkerType.Set(static_cast<uint32_t>(47), "MorthalCastle");
  MarkerType.Set(static_cast<uint32_t>(48), "MorthalCapitol");
  MarkerType.Set(static_cast<uint32_t>(49), "FalkreathCastle");
  MarkerType.Set(static_cast<uint32_t>(50), "FalkreathCapitol");
  MarkerType.Set(static_cast<uint32_t>(51), "DawnstarCastle");
  MarkerType.Set(static_cast<uint32_t>(52), "DawnstarCapitol");
  MarkerType.Set(static_cast<uint32_t>(53), "DLC02_TempleOfMiraak");
  MarkerType.Set(static_cast<uint32_t>(54), "DLC02_RavenRock");
  MarkerType.Set(static_cast<uint32_t>(55), "DLC02_BeastStone");
  MarkerType.Set(static_cast<uint32_t>(56), "DLC02_TelMithryn");
  MarkerType.Set(static_cast<uint32_t>(57), "DLC02_ToSkyrim");
  MarkerType.Set(static_cast<uint32_t>(58), "DLC02_ToSolstheim");
  MarkerType.Set("None", Napi::Number::New(env, 0));
  MarkerType.Set("City", Napi::Number::New(env, 1));
  MarkerType.Set("Town", Napi::Number::New(env, 2));
  MarkerType.Set("Settlement", Napi::Number::New(env, 3));
  MarkerType.Set("Cave", Napi::Number::New(env, 4));
  MarkerType.Set("Camp", Napi::Number::New(env, 5));
  MarkerType.Set("Fort", Napi::Number::New(env, 6));
  MarkerType.Set("NordicRuins", Napi::Number::New(env, 7));
  MarkerType.Set("DwemerRuin", Napi::Number::New(env, 8));
  MarkerType.Set("Shipwreck", Napi::Number::New(env, 9));
  MarkerType.Set("Grove", Napi::Number::New(env, 10));
  MarkerType.Set("Landmark", Napi::Number::New(env, 11));
  MarkerType.Set("DragonLair", Napi::Number::New(env, 12));
  MarkerType.Set("Farm", Napi::Number::New(env, 13));
  MarkerType.Set("WoodMill", Napi::Number::New(env, 14));
  MarkerType.Set("Mine", Napi::Number::New(env, 15));
  MarkerType.Set("ImperialCamp", Napi::Number::New(env, 16));
  MarkerType.Set("StormcloakCamp", Napi::Number::New(env, 17));
  MarkerType.Set("Doomstone", Napi::Number::New(env, 18));
  MarkerType.Set("WheatMill", Napi::Number::New(env, 19));
  MarkerType.Set("Smelter", Napi::Number::New(env, 20));
  MarkerType.Set("Stable", Napi::Number::New(env, 21));
  MarkerType.Set("ImperialTower", Napi::Number::New(env, 22));
  MarkerType.Set("Clearing", Napi::Number::New(env, 23));
  MarkerType.Set("Pass", Napi::Number::New(env, 24));
  MarkerType.Set("Alter", Napi::Number::New(env, 25));
  MarkerType.Set("Rock", Napi::Number::New(env, 26));
  MarkerType.Set("Lighthouse", Napi::Number::New(env, 27));
  MarkerType.Set("OrcStronghold", Napi::Number::New(env, 28));
  MarkerType.Set("GiantCamp", Napi::Number::New(env, 29));
  MarkerType.Set("Shack", Napi::Number::New(env, 30));
  MarkerType.Set("NordicTower", Napi::Number::New(env, 31));
  MarkerType.Set("NordicDwelling", Napi::Number::New(env, 32));
  MarkerType.Set("Docks", Napi::Number::New(env, 33));
  MarkerType.Set("Shrine", Napi::Number::New(env, 34));
  MarkerType.Set("RiftenCastle", Napi::Number::New(env, 35));
  MarkerType.Set("RiftenCapitol", Napi::Number::New(env, 36));
  MarkerType.Set("WindhelmCastle", Napi::Number::New(env, 37));
  MarkerType.Set("WindhelmCapitol", Napi::Number::New(env, 38));
  MarkerType.Set("WhiterunCastle", Napi::Number::New(env, 39));
  MarkerType.Set("WhiterunCapitol", Napi::Number::New(env, 40));
  MarkerType.Set("SolitudeCastle", Napi::Number::New(env, 41));
  MarkerType.Set("SolitudeCapitol", Napi::Number::New(env, 42));
  MarkerType.Set("MarkarthCastle", Napi::Number::New(env, 43));
  MarkerType.Set("MarkarthCapitol", Napi::Number::New(env, 44));
  MarkerType.Set("WinterholdCastle", Napi::Number::New(env, 45));
  MarkerType.Set("WinterholdCapitol", Napi::Number::New(env, 46));
  MarkerType.Set("MorthalCastle", Napi::Number::New(env, 47));
  MarkerType.Set("MorthalCapitol", Napi::Number::New(env, 48));
  MarkerType.Set("FalkreathCastle", Napi::Number::New(env, 49));
  MarkerType.Set("FalkreathCapitol", Napi::Number::New(env, 50));
  MarkerType.Set("DawnstarCastle", Napi::Number::New(env, 51));
  MarkerType.Set("DawnstarCapitol", Napi::Number::New(env, 52));
  MarkerType.Set("DLC02_TempleOfMiraak", Napi::Number::New(env, 53));
  MarkerType.Set("DLC02_RavenRock", Napi::Number::New(env, 54));
  MarkerType.Set("DLC02_BeastStone", Napi::Number::New(env, 55));
  MarkerType.Set("DLC02_TelMithryn", Napi::Number::New(env, 56));
  MarkerType.Set("DLC02_ToSkyrim", Napi::Number::New(env, 57));
  MarkerType.Set("DLC02_ToSolstheim", Napi::Number::New(env, 58));
  exports.Set("MarkerType", MarkerType);

  auto ActorValue = Napi::Object::New(env);
  ActorValue.Set(static_cast<uint32_t>(0), "Aggresion");
  ActorValue.Set(static_cast<uint32_t>(1), "Confidence");
  ActorValue.Set(static_cast<uint32_t>(2), "Energy");
  ActorValue.Set(static_cast<uint32_t>(3), "Morality");
  ActorValue.Set(static_cast<uint32_t>(4), "Mood");
  ActorValue.Set(static_cast<uint32_t>(5), "Assistance");
  ActorValue.Set(static_cast<uint32_t>(6), "OneHanded");
  ActorValue.Set(static_cast<uint32_t>(7), "TwoHanded");
  ActorValue.Set(static_cast<uint32_t>(8), "Archery");
  ActorValue.Set(static_cast<uint32_t>(9), "Block");
  ActorValue.Set(static_cast<uint32_t>(10), "Smithing");
  ActorValue.Set(static_cast<uint32_t>(11), "HeavyArmor");
  ActorValue.Set(static_cast<uint32_t>(12), "LightArmor");
  ActorValue.Set(static_cast<uint32_t>(13), "Pickpocket");
  ActorValue.Set(static_cast<uint32_t>(14), "Lockpicking");
  ActorValue.Set(static_cast<uint32_t>(15), "Sneak");
  ActorValue.Set(static_cast<uint32_t>(16), "Alchemy");
  ActorValue.Set(static_cast<uint32_t>(17), "Speech");
  ActorValue.Set(static_cast<uint32_t>(18), "Alteration");
  ActorValue.Set(static_cast<uint32_t>(19), "Conjuration");
  ActorValue.Set(static_cast<uint32_t>(20), "Destruction");
  ActorValue.Set(static_cast<uint32_t>(21), "Illusion");
  ActorValue.Set(static_cast<uint32_t>(22), "Restoration");
  ActorValue.Set(static_cast<uint32_t>(23), "Enchanting");
  ActorValue.Set(static_cast<uint32_t>(24), "Health");
  ActorValue.Set(static_cast<uint32_t>(25), "Magicka");
  ActorValue.Set(static_cast<uint32_t>(26), "Stamina");
  ActorValue.Set(static_cast<uint32_t>(27), "HealRate");
  ActorValue.Set(static_cast<uint32_t>(28), "MagickaRate");
  ActorValue.Set(static_cast<uint32_t>(29), "StaminaRate");
  ActorValue.Set(static_cast<uint32_t>(30), "SpeedMult");
  ActorValue.Set(static_cast<uint32_t>(31), "InventoryWeight");
  ActorValue.Set(static_cast<uint32_t>(32), "CarryWeight");
  ActorValue.Set(static_cast<uint32_t>(33), "CriticalChance");
  ActorValue.Set(static_cast<uint32_t>(34), "MeleeDamage");
  ActorValue.Set(static_cast<uint32_t>(35), "UnarmedDamage");
  ActorValue.Set(static_cast<uint32_t>(36), "Mass");
  ActorValue.Set(static_cast<uint32_t>(37), "VoicePoints");
  ActorValue.Set(static_cast<uint32_t>(38), "VoiceRate");
  ActorValue.Set(static_cast<uint32_t>(39), "DamageResist");
  ActorValue.Set(static_cast<uint32_t>(40), "PoisonResist");
  ActorValue.Set(static_cast<uint32_t>(41), "ResistFire");
  ActorValue.Set(static_cast<uint32_t>(42), "ResistShock");
  ActorValue.Set(static_cast<uint32_t>(43), "ResistFrost");
  ActorValue.Set(static_cast<uint32_t>(44), "ResistMagic");
  ActorValue.Set(static_cast<uint32_t>(45), "ResistDisease");
  ActorValue.Set(static_cast<uint32_t>(46), "Unknown46");
  ActorValue.Set(static_cast<uint32_t>(47), "Unknown47");
  ActorValue.Set(static_cast<uint32_t>(48), "Unknown48");
  ActorValue.Set(static_cast<uint32_t>(49), "Unknown49");
  ActorValue.Set(static_cast<uint32_t>(50), "Unknown50");
  ActorValue.Set(static_cast<uint32_t>(51), "Unknown51");
  ActorValue.Set(static_cast<uint32_t>(52), "Unknown52");
  ActorValue.Set(static_cast<uint32_t>(53), "Paralysis");
  ActorValue.Set(static_cast<uint32_t>(54), "Invisibility");
  ActorValue.Set(static_cast<uint32_t>(55), "NightEye");
  ActorValue.Set(static_cast<uint32_t>(56), "DetectLifeRange");
  ActorValue.Set(static_cast<uint32_t>(57), "WaterBreathing");
  ActorValue.Set(static_cast<uint32_t>(58), "WaterWalking");
  ActorValue.Set(static_cast<uint32_t>(59), "Unknown59");
  ActorValue.Set(static_cast<uint32_t>(60), "Fame");
  ActorValue.Set(static_cast<uint32_t>(61), "Infamy");
  ActorValue.Set(static_cast<uint32_t>(62), "JumpingBonus");
  ActorValue.Set(static_cast<uint32_t>(63), "WardPower");
  ActorValue.Set(static_cast<uint32_t>(64), "RightItemCharge");
  ActorValue.Set(static_cast<uint32_t>(65), "ArmorPerks");
  ActorValue.Set(static_cast<uint32_t>(66), "ShieldPerks");
  ActorValue.Set(static_cast<uint32_t>(67), "WardDeflection");
  ActorValue.Set(static_cast<uint32_t>(68), "Variable01");
  ActorValue.Set(static_cast<uint32_t>(69), "Variable02");
  ActorValue.Set(static_cast<uint32_t>(70), "Variable03");
  ActorValue.Set(static_cast<uint32_t>(71), "Variable04");
  ActorValue.Set(static_cast<uint32_t>(72), "Variable05");
  ActorValue.Set(static_cast<uint32_t>(73), "Variable06");
  ActorValue.Set(static_cast<uint32_t>(74), "Variable07");
  ActorValue.Set(static_cast<uint32_t>(75), "Variable08");
  ActorValue.Set(static_cast<uint32_t>(76), "Variable09");
  ActorValue.Set(static_cast<uint32_t>(77), "Variable10");
  ActorValue.Set(static_cast<uint32_t>(78), "BowSpeedBonus");
  ActorValue.Set(static_cast<uint32_t>(79), "FavorActive");
  ActorValue.Set(static_cast<uint32_t>(80), "FavorsPerDay");
  ActorValue.Set(static_cast<uint32_t>(81), "FavorsPerDayTimer");
  ActorValue.Set(static_cast<uint32_t>(82), "LeftItemCharge");
  ActorValue.Set(static_cast<uint32_t>(83), "AbsorbChance");
  ActorValue.Set(static_cast<uint32_t>(84), "Blindness");
  ActorValue.Set(static_cast<uint32_t>(85), "WeaponSpeedMult");
  ActorValue.Set(static_cast<uint32_t>(86), "ShoutRecoveryMult");
  ActorValue.Set(static_cast<uint32_t>(87), "BowStaggerBonus");
  ActorValue.Set(static_cast<uint32_t>(88), "Telekinesis");
  ActorValue.Set(static_cast<uint32_t>(89), "FavorPointsBonus");
  ActorValue.Set(static_cast<uint32_t>(90), "LastBribedIntimidated");
  ActorValue.Set(static_cast<uint32_t>(91), "LastFlattered");
  ActorValue.Set(static_cast<uint32_t>(92), "MovementNoiseMult");
  ActorValue.Set(static_cast<uint32_t>(93), "BypassVendorStolenCheck");
  ActorValue.Set(static_cast<uint32_t>(94), "BypassVendorKeywordCheck");
  ActorValue.Set(static_cast<uint32_t>(95), "WaitingForPlayer");
  ActorValue.Set(static_cast<uint32_t>(96), "OneHandedModifier");
  ActorValue.Set(static_cast<uint32_t>(97), "TwoHandedModifier");
  ActorValue.Set(static_cast<uint32_t>(98), "MarksmanModifier");
  ActorValue.Set(static_cast<uint32_t>(99), "BlockModifier");
  ActorValue.Set(static_cast<uint32_t>(100), "SmithingModifier");
  ActorValue.Set(static_cast<uint32_t>(101), "HeavyArmorModifier");
  ActorValue.Set(static_cast<uint32_t>(102), "LightArmorModifier");
  ActorValue.Set(static_cast<uint32_t>(103), "PickpocketModifier");
  ActorValue.Set(static_cast<uint32_t>(104), "LockpickingModifier");
  ActorValue.Set(static_cast<uint32_t>(105), "SneakingModifier");
  ActorValue.Set(static_cast<uint32_t>(106), "AlchemyModifier");
  ActorValue.Set(static_cast<uint32_t>(107), "SpeechcraftModifier");
  ActorValue.Set(static_cast<uint32_t>(108), "AlterationModifier");
  ActorValue.Set(static_cast<uint32_t>(109), "ConjurationModifier");
  ActorValue.Set(static_cast<uint32_t>(110), "DestructionModifier");
  ActorValue.Set(static_cast<uint32_t>(111), "IllusionModifier");
  ActorValue.Set(static_cast<uint32_t>(112), "RestorationModifier");
  ActorValue.Set(static_cast<uint32_t>(113), "EnchantingModifier");
  ActorValue.Set(static_cast<uint32_t>(114), "OneHandedSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(115), "TwoHandedSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(116), "MarksmanSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(117), "BlockSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(118), "SmithingSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(119), "HeavyArmorSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(120), "LightArmorSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(121), "PickpocketSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(122), "LockpickingSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(123), "SneakingSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(124), "AlchemySkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(125), "SpeechcraftSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(126), "AlterationSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(127), "ConjurationSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(128), "DestructionSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(129), "IllusionSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(130), "RestorationSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(131), "EnchantingSkillAdvance");
  ActorValue.Set(static_cast<uint32_t>(132), "LeftWeaponSpeedMultiply");
  ActorValue.Set(static_cast<uint32_t>(133), "DragonSouls");
  ActorValue.Set(static_cast<uint32_t>(134), "CombatHealthRegenMultiply");
  ActorValue.Set(static_cast<uint32_t>(135), "OneHandedPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(136), "TwoHandedPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(137), "MarksmanPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(138), "BlockPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(139), "SmithingPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(140), "HeavyArmorPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(141), "LightArmorPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(142), "PickpocketPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(143), "LockpickingPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(144), "SneakingPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(145), "AlchemyPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(146), "SpeechcraftPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(147), "AlterationPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(148), "ConjurationPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(149), "DestructionPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(150), "IllusionPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(151), "RestorationPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(152), "EnchantingPowerModifier");
  ActorValue.Set(static_cast<uint32_t>(153), "DragonRend");
  ActorValue.Set(static_cast<uint32_t>(154), "AttackDamageMult");
  ActorValue.Set(static_cast<uint32_t>(155), "HealRateMult");
  ActorValue.Set(static_cast<uint32_t>(156), "MagickaRateMult");
  ActorValue.Set(static_cast<uint32_t>(157), "StaminaRateMult");
  ActorValue.Set(static_cast<uint32_t>(158), "WerewolfPerks");
  ActorValue.Set(static_cast<uint32_t>(159), "VampirePerks");
  ActorValue.Set(static_cast<uint32_t>(160), "GrabActorOffset");
  ActorValue.Set(static_cast<uint32_t>(161), "Grabbed");
  ActorValue.Set(static_cast<uint32_t>(162), "Unknown162");
  ActorValue.Set(static_cast<uint32_t>(163), "ReflectDamage");
  ActorValue.Set("Aggresion", Napi::Number::New(env, 0));
  ActorValue.Set("Confidence", Napi::Number::New(env, 1));
  ActorValue.Set("Energy", Napi::Number::New(env, 2));
  ActorValue.Set("Morality", Napi::Number::New(env, 3));
  ActorValue.Set("Mood", Napi::Number::New(env, 4));
  ActorValue.Set("Assistance", Napi::Number::New(env, 5));
  ActorValue.Set("OneHanded", Napi::Number::New(env, 6));
  ActorValue.Set("TwoHanded", Napi::Number::New(env, 7));
  ActorValue.Set("Archery", Napi::Number::New(env, 8));
  ActorValue.Set("Block", Napi::Number::New(env, 9));
  ActorValue.Set("Smithing", Napi::Number::New(env, 10));
  ActorValue.Set("HeavyArmor", Napi::Number::New(env, 11));
  ActorValue.Set("LightArmor", Napi::Number::New(env, 12));
  ActorValue.Set("Pickpocket", Napi::Number::New(env, 13));
  ActorValue.Set("Lockpicking", Napi::Number::New(env, 14));
  ActorValue.Set("Sneak", Napi::Number::New(env, 15));
  ActorValue.Set("Alchemy", Napi::Number::New(env, 16));
  ActorValue.Set("Speech", Napi::Number::New(env, 17));
  ActorValue.Set("Alteration", Napi::Number::New(env, 18));
  ActorValue.Set("Conjuration", Napi::Number::New(env, 19));
  ActorValue.Set("Destruction", Napi::Number::New(env, 20));
  ActorValue.Set("Illusion", Napi::Number::New(env, 21));
  ActorValue.Set("Restoration", Napi::Number::New(env, 22));
  ActorValue.Set("Enchanting", Napi::Number::New(env, 23));
  ActorValue.Set("Health", Napi::Number::New(env, 24));
  ActorValue.Set("Magicka", Napi::Number::New(env, 25));
  ActorValue.Set("Stamina", Napi::Number::New(env, 26));
  ActorValue.Set("HealRate", Napi::Number::New(env, 27));
  ActorValue.Set("MagickaRate", Napi::Number::New(env, 28));
  ActorValue.Set("StaminaRate", Napi::Number::New(env, 29));
  ActorValue.Set("SpeedMult", Napi::Number::New(env, 30));
  ActorValue.Set("InventoryWeight", Napi::Number::New(env, 31));
  ActorValue.Set("CarryWeight", Napi::Number::New(env, 32));
  ActorValue.Set("CriticalChance", Napi::Number::New(env, 33));
  ActorValue.Set("MeleeDamage", Napi::Number::New(env, 34));
  ActorValue.Set("UnarmedDamage", Napi::Number::New(env, 35));
  ActorValue.Set("Mass", Napi::Number::New(env, 36));
  ActorValue.Set("VoicePoints", Napi::Number::New(env, 37));
  ActorValue.Set("VoiceRate", Napi::Number::New(env, 38));
  ActorValue.Set("DamageResist", Napi::Number::New(env, 39));
  ActorValue.Set("PoisonResist", Napi::Number::New(env, 40));
  ActorValue.Set("ResistFire", Napi::Number::New(env, 41));
  ActorValue.Set("ResistShock", Napi::Number::New(env, 42));
  ActorValue.Set("ResistFrost", Napi::Number::New(env, 43));
  ActorValue.Set("ResistMagic", Napi::Number::New(env, 44));
  ActorValue.Set("ResistDisease", Napi::Number::New(env, 45));
  ActorValue.Set("Unknown46", Napi::Number::New(env, 46));
  ActorValue.Set("Unknown47", Napi::Number::New(env, 47));
  ActorValue.Set("Unknown48", Napi::Number::New(env, 48));
  ActorValue.Set("Unknown49", Napi::Number::New(env, 49));
  ActorValue.Set("Unknown50", Napi::Number::New(env, 50));
  ActorValue.Set("Unknown51", Napi::Number::New(env, 51));
  ActorValue.Set("Unknown52", Napi::Number::New(env, 52));
  ActorValue.Set("Paralysis", Napi::Number::New(env, 53));
  ActorValue.Set("Invisibility", Napi::Number::New(env, 54));
  ActorValue.Set("NightEye", Napi::Number::New(env, 55));
  ActorValue.Set("DetectLifeRange", Napi::Number::New(env, 56));
  ActorValue.Set("WaterBreathing", Napi::Number::New(env, 57));
  ActorValue.Set("WaterWalking", Napi::Number::New(env, 58));
  ActorValue.Set("Unknown59", Napi::Number::New(env, 59));
  ActorValue.Set("Fame", Napi::Number::New(env, 60));
  ActorValue.Set("Infamy", Napi::Number::New(env, 61));
  ActorValue.Set("JumpingBonus", Napi::Number::New(env, 62));
  ActorValue.Set("WardPower", Napi::Number::New(env, 63));
  ActorValue.Set("RightItemCharge", Napi::Number::New(env, 64));
  ActorValue.Set("ArmorPerks", Napi::Number::New(env, 65));
  ActorValue.Set("ShieldPerks", Napi::Number::New(env, 66));
  ActorValue.Set("WardDeflection", Napi::Number::New(env, 67));
  ActorValue.Set("Variable01", Napi::Number::New(env, 68));
  ActorValue.Set("Variable02", Napi::Number::New(env, 69));
  ActorValue.Set("Variable03", Napi::Number::New(env, 70));
  ActorValue.Set("Variable04", Napi::Number::New(env, 71));
  ActorValue.Set("Variable05", Napi::Number::New(env, 72));
  ActorValue.Set("Variable06", Napi::Number::New(env, 73));
  ActorValue.Set("Variable07", Napi::Number::New(env, 74));
  ActorValue.Set("Variable08", Napi::Number::New(env, 75));
  ActorValue.Set("Variable09", Napi::Number::New(env, 76));
  ActorValue.Set("Variable10", Napi::Number::New(env, 77));
  ActorValue.Set("BowSpeedBonus", Napi::Number::New(env, 78));
  ActorValue.Set("FavorActive", Napi::Number::New(env, 79));
  ActorValue.Set("FavorsPerDay", Napi::Number::New(env, 80));
  ActorValue.Set("FavorsPerDayTimer", Napi::Number::New(env, 81));
  ActorValue.Set("LeftItemCharge", Napi::Number::New(env, 82));
  ActorValue.Set("AbsorbChance", Napi::Number::New(env, 83));
  ActorValue.Set("Blindness", Napi::Number::New(env, 84));
  ActorValue.Set("WeaponSpeedMult", Napi::Number::New(env, 85));
  ActorValue.Set("ShoutRecoveryMult", Napi::Number::New(env, 86));
  ActorValue.Set("BowStaggerBonus", Napi::Number::New(env, 87));
  ActorValue.Set("Telekinesis", Napi::Number::New(env, 88));
  ActorValue.Set("FavorPointsBonus", Napi::Number::New(env, 89));
  ActorValue.Set("LastBribedIntimidated", Napi::Number::New(env, 90));
  ActorValue.Set("LastFlattered", Napi::Number::New(env, 91));
  ActorValue.Set("MovementNoiseMult", Napi::Number::New(env, 92));
  ActorValue.Set("BypassVendorStolenCheck", Napi::Number::New(env, 93));
  ActorValue.Set("BypassVendorKeywordCheck", Napi::Number::New(env, 94));
  ActorValue.Set("WaitingForPlayer", Napi::Number::New(env, 95));
  ActorValue.Set("OneHandedModifier", Napi::Number::New(env, 96));
  ActorValue.Set("TwoHandedModifier", Napi::Number::New(env, 97));
  ActorValue.Set("MarksmanModifier", Napi::Number::New(env, 98));
  ActorValue.Set("BlockModifier", Napi::Number::New(env, 99));
  ActorValue.Set("SmithingModifier", Napi::Number::New(env, 100));
  ActorValue.Set("HeavyArmorModifier", Napi::Number::New(env, 101));
  ActorValue.Set("LightArmorModifier", Napi::Number::New(env, 102));
  ActorValue.Set("PickpocketModifier", Napi::Number::New(env, 103));
  ActorValue.Set("LockpickingModifier", Napi::Number::New(env, 104));
  ActorValue.Set("SneakingModifier", Napi::Number::New(env, 105));
  ActorValue.Set("AlchemyModifier", Napi::Number::New(env, 106));
  ActorValue.Set("SpeechcraftModifier", Napi::Number::New(env, 107));
  ActorValue.Set("AlterationModifier", Napi::Number::New(env, 108));
  ActorValue.Set("ConjurationModifier", Napi::Number::New(env, 109));
  ActorValue.Set("DestructionModifier", Napi::Number::New(env, 110));
  ActorValue.Set("IllusionModifier", Napi::Number::New(env, 111));
  ActorValue.Set("RestorationModifier", Napi::Number::New(env, 112));
  ActorValue.Set("EnchantingModifier", Napi::Number::New(env, 113));
  ActorValue.Set("OneHandedSkillAdvance", Napi::Number::New(env, 114));
  ActorValue.Set("TwoHandedSkillAdvance", Napi::Number::New(env, 115));
  ActorValue.Set("MarksmanSkillAdvance", Napi::Number::New(env, 116));
  ActorValue.Set("BlockSkillAdvance", Napi::Number::New(env, 117));
  ActorValue.Set("SmithingSkillAdvance", Napi::Number::New(env, 118));
  ActorValue.Set("HeavyArmorSkillAdvance", Napi::Number::New(env, 119));
  ActorValue.Set("LightArmorSkillAdvance", Napi::Number::New(env, 120));
  ActorValue.Set("PickpocketSkillAdvance", Napi::Number::New(env, 121));
  ActorValue.Set("LockpickingSkillAdvance", Napi::Number::New(env, 122));
  ActorValue.Set("SneakingSkillAdvance", Napi::Number::New(env, 123));
  ActorValue.Set("AlchemySkillAdvance", Napi::Number::New(env, 124));
  ActorValue.Set("SpeechcraftSkillAdvance", Napi::Number::New(env, 125));
  ActorValue.Set("AlterationSkillAdvance", Napi::Number::New(env, 126));
  ActorValue.Set("ConjurationSkillAdvance", Napi::Number::New(env, 127));
  ActorValue.Set("DestructionSkillAdvance", Napi::Number::New(env, 128));
  ActorValue.Set("IllusionSkillAdvance", Napi::Number::New(env, 129));
  ActorValue.Set("RestorationSkillAdvance", Napi::Number::New(env, 130));
  ActorValue.Set("EnchantingSkillAdvance", Napi::Number::New(env, 131));
  ActorValue.Set("LeftWeaponSpeedMultiply", Napi::Number::New(env, 132));
  ActorValue.Set("DragonSouls", Napi::Number::New(env, 133));
  ActorValue.Set("CombatHealthRegenMultiply", Napi::Number::New(env, 134));
  ActorValue.Set("OneHandedPowerModifier", Napi::Number::New(env, 135));
  ActorValue.Set("TwoHandedPowerModifier", Napi::Number::New(env, 136));
  ActorValue.Set("MarksmanPowerModifier", Napi::Number::New(env, 137));
  ActorValue.Set("BlockPowerModifier", Napi::Number::New(env, 138));
  ActorValue.Set("SmithingPowerModifier", Napi::Number::New(env, 139));
  ActorValue.Set("HeavyArmorPowerModifier", Napi::Number::New(env, 140));
  ActorValue.Set("LightArmorPowerModifier", Napi::Number::New(env, 141));
  ActorValue.Set("PickpocketPowerModifier", Napi::Number::New(env, 142));
  ActorValue.Set("LockpickingPowerModifier", Napi::Number::New(env, 143));
  ActorValue.Set("SneakingPowerModifier", Napi::Number::New(env, 144));
  ActorValue.Set("AlchemyPowerModifier", Napi::Number::New(env, 145));
  ActorValue.Set("SpeechcraftPowerModifier", Napi::Number::New(env, 146));
  ActorValue.Set("AlterationPowerModifier", Napi::Number::New(env, 147));
  ActorValue.Set("ConjurationPowerModifier", Napi::Number::New(env, 148));
  ActorValue.Set("DestructionPowerModifier", Napi::Number::New(env, 149));
  ActorValue.Set("IllusionPowerModifier", Napi::Number::New(env, 150));
  ActorValue.Set("RestorationPowerModifier", Napi::Number::New(env, 151));
  ActorValue.Set("EnchantingPowerModifier", Napi::Number::New(env, 152));
  ActorValue.Set("DragonRend", Napi::Number::New(env, 153));
  ActorValue.Set("AttackDamageMult", Napi::Number::New(env, 154));
  ActorValue.Set("HealRateMult", Napi::Number::New(env, 155));
  ActorValue.Set("MagickaRateMult", Napi::Number::New(env, 156));
  ActorValue.Set("StaminaRateMult", Napi::Number::New(env, 157));
  ActorValue.Set("WerewolfPerks", Napi::Number::New(env, 158));
  ActorValue.Set("VampirePerks", Napi::Number::New(env, 159));
  ActorValue.Set("GrabActorOffset", Napi::Number::New(env, 160));
  ActorValue.Set("Grabbed", Napi::Number::New(env, 161));
  ActorValue.Set("Unknown162", Napi::Number::New(env, 162));
  ActorValue.Set("ReflectDamage", Napi::Number::New(env, 163));
  exports.Set("ActorValue", ActorValue);

  auto SlotType = Napi::Object::New(env);
  SlotType.Set(static_cast<uint32_t>(1), "Left");
  SlotType.Set(static_cast<uint32_t>(2), "Right");
  SlotType.Set(static_cast<uint32_t>(3), "Voice");
  SlotType.Set("Left", Napi::Number::New(env, 1));
  SlotType.Set("Right", Napi::Number::New(env, 2));
  SlotType.Set("Voice", Napi::Number::New(env, 3));
  exports.Set("SlotType", SlotType);

  auto WardHitStatus = Napi::Object::New(env);
  WardHitStatus.Set(static_cast<uint32_t>(0), "Friendly");
  WardHitStatus.Set(static_cast<uint32_t>(1), "Absorbed");
  WardHitStatus.Set(static_cast<uint32_t>(2), "Broken");
  WardHitStatus.Set("Friendly", Napi::Number::New(env, 0));
  WardHitStatus.Set("Absorbed", Napi::Number::New(env, 1));
  WardHitStatus.Set("Broken", Napi::Number::New(env, 2));
  exports.Set("WardHitStatus", WardHitStatus);

  auto PlayerPositionEventType = Napi::Object::New(env);
  PlayerPositionEventType.Set(static_cast<uint32_t>(0), "PreCellTransition");
  PlayerPositionEventType.Set(static_cast<uint32_t>(1), "PreUpdatePackages");
  PlayerPositionEventType.Set(static_cast<uint32_t>(2), "PostUpdatePackages");
  PlayerPositionEventType.Set(static_cast<uint32_t>(3), "PostCellTransition");
  PlayerPositionEventType.Set(static_cast<uint32_t>(4),
                              "CellTransitionFinish");
  PlayerPositionEventType.Set("PreCellTransition", Napi::Number::New(env, 0));
  PlayerPositionEventType.Set("PreUpdatePackages", Napi::Number::New(env, 1));
  PlayerPositionEventType.Set("PostUpdatePackages", Napi::Number::New(env, 2));
  PlayerPositionEventType.Set("PostCellTransition", Napi::Number::New(env, 3));
  PlayerPositionEventType.Set("CellTransitionFinish",
                              Napi::Number::New(env, 4));
  exports.Set("PlayerPositionEventType", PlayerPositionEventType);

  auto InputDeviceType = Napi::Object::New(env);
  InputDeviceType.Set(static_cast<uint32_t>(0), "Keyboard");
  InputDeviceType.Set(static_cast<uint32_t>(1), "Mouse");
  InputDeviceType.Set(static_cast<uint32_t>(2), "Gamepad");
  InputDeviceType.Set(static_cast<uint32_t>(3), "VirtualKeyboard");
  InputDeviceType.Set("Keyboard", Napi::Number::New(env, 0));
  InputDeviceType.Set("Mouse", Napi::Number::New(env, 1));
  InputDeviceType.Set("Gamepad", Napi::Number::New(env, 2));
  InputDeviceType.Set("VirtualKeyboard", Napi::Number::New(env, 3));
  exports.Set("InputDeviceType", InputDeviceType);

  auto MotionType = Napi::Object::New(env);
  MotionType.Set(static_cast<uint32_t>(1), "Dynamic");
  MotionType.Set(static_cast<uint32_t>(2), "SphereInertia");
  MotionType.Set(static_cast<uint32_t>(3), "BoxInertia");
  MotionType.Set(static_cast<uint32_t>(4), "Keyframed");
  MotionType.Set(static_cast<uint32_t>(5), "Fixed");
  MotionType.Set(static_cast<uint32_t>(6), "ThinBoxInertia");
  MotionType.Set(static_cast<uint32_t>(7), "Character");
  MotionType.Set("Dynamic", Napi::Number::New(env, 1));
  MotionType.Set("SphereInertia", Napi::Number::New(env, 2));
  MotionType.Set("BoxInertia", Napi::Number::New(env, 3));
  MotionType.Set("Keyframed", Napi::Number::New(env, 4));
  MotionType.Set("Fixed", Napi::Number::New(env, 5));
  MotionType.Set("ThinBoxInertia", Napi::Number::New(env, 6));
  MotionType.Set("Character", Napi::Number::New(env, 7));
  exports.Set("MotionType", MotionType);

  auto Menu = Napi::Object::New(env);
  Menu.Set("BarterMenu", "Barter");
  Menu.Set("Book Menu", "Book");
  Menu.Set("Console", "Console");
  Menu.Set("Console Native UI Menu", "ConsoleNativeUI");
  Menu.Set("ContainerMenu", "Container");
  Menu.Set("Crafting Menu", "Crafting");
  Menu.Set("Credits Menu", "Credits");
  Menu.Set("Cursor Menu", "Cursor");
  Menu.Set("Debug Text Menu", "Debug");
  Menu.Set("Dialogue Menu", "Dialogue");
  Menu.Set("Fader Menu", "Fader");
  Menu.Set("FavoritesMenu", "Favorites");
  Menu.Set("GiftMenu", "Gift");
  Menu.Set("HUD Menu", "HUD");
  Menu.Set("InventoryMenu", "Inventory");
  Menu.Set("Journal Menu", "Journal");
  Menu.Set("Kinect Menu", "Kinect");
  Menu.Set("LevelUp Menu", "LevelUp");
  Menu.Set("Loading Menu", "Loading");
  Menu.Set("Main Menu", "Main");
  Menu.Set("Lockpicking Menu", "Lockpicking");
  Menu.Set("MagicMenu", "Magic");
  Menu.Set("MapMenu", "Map");
  Menu.Set("MessageBoxMenu", "MessageBox");
  Menu.Set("Mist Menu", "Mist");
  Menu.Set("Overlay Interaction Menu", "OverlayInteraction");
  Menu.Set("Overlay Menu", "Overlay");
  Menu.Set("Quantity Menu", "Quantity");
  Menu.Set("RaceSex Menu", "RaceSex");
  Menu.Set("Sleep/Wait Menu", "Sleep");
  Menu.Set("StatsMenu", "Stats");
  Menu.Set("TitleSequence Menu", "TitleSequence");
  Menu.Set("Top Menu", "Top");
  Menu.Set("Training Menu", "Training");
  Menu.Set("Tutorial Menu", "Tutorial");
  Menu.Set("TweenMenu", "Tween");
  Menu.Set("Barter", Napi::String::New(env, "BarterMenu"));
  Menu.Set("Book", Napi::String::New(env, "Book Menu"));
  Menu.Set("Console", Napi::String::New(env, "Console"));
  Menu.Set("ConsoleNativeUI",
           Napi::String::New(env, "Console Native UI Menu"));
  Menu.Set("Container", Napi::String::New(env, "ContainerMenu"));
  Menu.Set("Crafting", Napi::String::New(env, "Crafting Menu"));
  Menu.Set("Credits", Napi::String::New(env, "Credits Menu"));
  Menu.Set("Cursor", Napi::String::New(env, "Cursor Menu"));
  Menu.Set("Debug", Napi::String::New(env, "Debug Text Menu"));
  Menu.Set("Dialogue", Napi::String::New(env, "Dialogue Menu"));
  Menu.Set("Fader", Napi::String::New(env, "Fader Menu"));
  Menu.Set("Favorites", Napi::String::New(env, "FavoritesMenu"));
  Menu.Set("Gift", Napi::String::New(env, "GiftMenu"));
  Menu.Set("HUD", Napi::String::New(env, "HUD Menu"));
  Menu.Set("Inventory", Napi::String::New(env, "InventoryMenu"));
  Menu.Set("Journal", Napi::String::New(env, "Journal Menu"));
  Menu.Set("Kinect", Napi::String::New(env, "Kinect Menu"));
  Menu.Set("LevelUp", Napi::String::New(env, "LevelUp Menu"));
  Menu.Set("Loading", Napi::String::New(env, "Loading Menu"));
  Menu.Set("Main", Napi::String::New(env, "Main Menu"));
  Menu.Set("Lockpicking", Napi::String::New(env, "Lockpicking Menu"));
  Menu.Set("Magic", Napi::String::New(env, "MagicMenu"));
  Menu.Set("Map", Napi::String::New(env, "MapMenu"));
  Menu.Set("MessageBox", Napi::String::New(env, "MessageBoxMenu"));
  Menu.Set("Mist", Napi::String::New(env, "Mist Menu"));
  Menu.Set("OverlayInteraction",
           Napi::String::New(env, "Overlay Interaction Menu"));
  Menu.Set("Overlay", Napi::String::New(env, "Overlay Menu"));
  Menu.Set("Quantity", Napi::String::New(env, "Quantity Menu"));
  Menu.Set("RaceSex", Napi::String::New(env, "RaceSex Menu"));
  Menu.Set("Sleep", Napi::String::New(env, "Sleep/Wait Menu"));
  Menu.Set("Stats", Napi::String::New(env, "StatsMenu"));
  Menu.Set("TitleSequence", Napi::String::New(env, "TitleSequence Menu"));
  Menu.Set("Top", Napi::String::New(env, "Top Menu"));
  Menu.Set("Training", Napi::String::New(env, "Training Menu"));
  Menu.Set("Tutorial", Napi::String::New(env, "Tutorial Menu"));
  Menu.Set("Tween", Napi::String::New(env, "TweenMenu"));
  exports.Set("Menu", Menu);

  auto DxScanCode = Napi::Object::New(env);
  DxScanCode.Set(static_cast<uint32_t>(0), "None");
  DxScanCode.Set(static_cast<uint32_t>(1), "Escape");
  DxScanCode.Set(static_cast<uint32_t>(2), "N1");
  DxScanCode.Set(static_cast<uint32_t>(3), "N2");
  DxScanCode.Set(static_cast<uint32_t>(4), "N3");
  DxScanCode.Set(static_cast<uint32_t>(5), "N4");
  DxScanCode.Set(static_cast<uint32_t>(6), "N5");
  DxScanCode.Set(static_cast<uint32_t>(7), "N6");
  DxScanCode.Set(static_cast<uint32_t>(8), "N7");
  DxScanCode.Set(static_cast<uint32_t>(9), "N8");
  DxScanCode.Set(static_cast<uint32_t>(10), "N9");
  DxScanCode.Set(static_cast<uint32_t>(11), "N0");
  DxScanCode.Set(static_cast<uint32_t>(12), "Minus");
  DxScanCode.Set(static_cast<uint32_t>(13), "Equals");
  DxScanCode.Set(static_cast<uint32_t>(14), "Backspace");
  DxScanCode.Set(static_cast<uint32_t>(15), "Tab");
  DxScanCode.Set(static_cast<uint32_t>(16), "Q");
  DxScanCode.Set(static_cast<uint32_t>(17), "W");
  DxScanCode.Set(static_cast<uint32_t>(18), "E");
  DxScanCode.Set(static_cast<uint32_t>(19), "R");
  DxScanCode.Set(static_cast<uint32_t>(20), "T");
  DxScanCode.Set(static_cast<uint32_t>(21), "Y");
  DxScanCode.Set(static_cast<uint32_t>(22), "U");
  DxScanCode.Set(static_cast<uint32_t>(23), "I");
  DxScanCode.Set(static_cast<uint32_t>(24), "O");
  DxScanCode.Set(static_cast<uint32_t>(25), "P");
  DxScanCode.Set(static_cast<uint32_t>(26), "LeftBracket");
  DxScanCode.Set(static_cast<uint32_t>(27), "RightBracket");
  DxScanCode.Set(static_cast<uint32_t>(28), "Enter");
  DxScanCode.Set(static_cast<uint32_t>(29), "LeftControl");
  DxScanCode.Set(static_cast<uint32_t>(30), "A");
  DxScanCode.Set(static_cast<uint32_t>(31), "S");
  DxScanCode.Set(static_cast<uint32_t>(32), "D");
  DxScanCode.Set(static_cast<uint32_t>(33), "F");
  DxScanCode.Set(static_cast<uint32_t>(34), "G");
  DxScanCode.Set(static_cast<uint32_t>(35), "H");
  DxScanCode.Set(static_cast<uint32_t>(36), "J");
  DxScanCode.Set(static_cast<uint32_t>(37), "K");
  DxScanCode.Set(static_cast<uint32_t>(38), "L");
  DxScanCode.Set(static_cast<uint32_t>(39), "Semicolon");
  DxScanCode.Set(static_cast<uint32_t>(40), "Apostrophe");
  DxScanCode.Set(static_cast<uint32_t>(41), "Console");
  DxScanCode.Set(static_cast<uint32_t>(42), "LeftShift");
  DxScanCode.Set(static_cast<uint32_t>(43), "BackSlash");
  DxScanCode.Set(static_cast<uint32_t>(44), "Z");
  DxScanCode.Set(static_cast<uint32_t>(45), "X");
  DxScanCode.Set(static_cast<uint32_t>(46), "C");
  DxScanCode.Set(static_cast<uint32_t>(47), "V");
  DxScanCode.Set(static_cast<uint32_t>(48), "B");
  DxScanCode.Set(static_cast<uint32_t>(49), "N");
  DxScanCode.Set(static_cast<uint32_t>(50), "M");
  DxScanCode.Set(static_cast<uint32_t>(51), "Comma");
  DxScanCode.Set(static_cast<uint32_t>(52), "Period");
  DxScanCode.Set(static_cast<uint32_t>(53), "ForwardSlash");
  DxScanCode.Set(static_cast<uint32_t>(54), "RightShift");
  DxScanCode.Set(static_cast<uint32_t>(55), "NumMult");
  DxScanCode.Set(static_cast<uint32_t>(56), "LeftAlt");
  DxScanCode.Set(static_cast<uint32_t>(57), "Spacebar");
  DxScanCode.Set(static_cast<uint32_t>(58), "CapsLock");
  DxScanCode.Set(static_cast<uint32_t>(59), "F1");
  DxScanCode.Set(static_cast<uint32_t>(60), "F2");
  DxScanCode.Set(static_cast<uint32_t>(61), "F3");
  DxScanCode.Set(static_cast<uint32_t>(62), "F4");
  DxScanCode.Set(static_cast<uint32_t>(63), "F5");
  DxScanCode.Set(static_cast<uint32_t>(64), "F6");
  DxScanCode.Set(static_cast<uint32_t>(65), "F7");
  DxScanCode.Set(static_cast<uint32_t>(66), "F8");
  DxScanCode.Set(static_cast<uint32_t>(67), "F9");
  DxScanCode.Set(static_cast<uint32_t>(68), "F10");
  DxScanCode.Set(static_cast<uint32_t>(69), "NumLock");
  DxScanCode.Set(static_cast<uint32_t>(70), "ScrollLock");
  DxScanCode.Set(static_cast<uint32_t>(71), "Num7");
  DxScanCode.Set(static_cast<uint32_t>(72), "Num8");
  DxScanCode.Set(static_cast<uint32_t>(73), "Num9");
  DxScanCode.Set(static_cast<uint32_t>(74), "NumMinus");
  DxScanCode.Set(static_cast<uint32_t>(75), "Num4");
  DxScanCode.Set(static_cast<uint32_t>(76), "Num5");
  DxScanCode.Set(static_cast<uint32_t>(77), "Num6");
  DxScanCode.Set(static_cast<uint32_t>(78), "NumPlus");
  DxScanCode.Set(static_cast<uint32_t>(79), "Num1");
  DxScanCode.Set(static_cast<uint32_t>(80), "Num2");
  DxScanCode.Set(static_cast<uint32_t>(81), "Num3");
  DxScanCode.Set(static_cast<uint32_t>(82), "Num0");
  DxScanCode.Set(static_cast<uint32_t>(83), "NumDot");
  DxScanCode.Set(static_cast<uint32_t>(87), "F11");
  DxScanCode.Set(static_cast<uint32_t>(88), "F12");
  DxScanCode.Set(static_cast<uint32_t>(156), "NumEnter");
  DxScanCode.Set(static_cast<uint32_t>(157), "RightControl");
  DxScanCode.Set(static_cast<uint32_t>(181), "NumSlash");
  DxScanCode.Set(static_cast<uint32_t>(183), "SysRqPtrScr");
  DxScanCode.Set(static_cast<uint32_t>(184), "RightAlt");
  DxScanCode.Set(static_cast<uint32_t>(197), "Pause");
  DxScanCode.Set(static_cast<uint32_t>(199), "Home");
  DxScanCode.Set(static_cast<uint32_t>(200), "UpArrow");
  DxScanCode.Set(static_cast<uint32_t>(201), "PgUp");
  DxScanCode.Set(static_cast<uint32_t>(203), "LeftArrow");
  DxScanCode.Set(static_cast<uint32_t>(205), "RightArrow");
  DxScanCode.Set(static_cast<uint32_t>(207), "End");
  DxScanCode.Set(static_cast<uint32_t>(208), "DownArrow");
  DxScanCode.Set(static_cast<uint32_t>(209), "PgDown");
  DxScanCode.Set(static_cast<uint32_t>(210), "Insert");
  DxScanCode.Set(static_cast<uint32_t>(211), "Delete");
  DxScanCode.Set(static_cast<uint32_t>(256), "LeftMouseButton");
  DxScanCode.Set(static_cast<uint32_t>(257), "RightMouseButton");
  DxScanCode.Set(static_cast<uint32_t>(258), "MiddleMouseButton");
  DxScanCode.Set(static_cast<uint32_t>(259), "MouseButton3");
  DxScanCode.Set(static_cast<uint32_t>(260), "MouseButton4");
  DxScanCode.Set(static_cast<uint32_t>(261), "MouseButton5");
  DxScanCode.Set(static_cast<uint32_t>(262), "MouseButton6");
  DxScanCode.Set(static_cast<uint32_t>(263), "MouseButton7");
  DxScanCode.Set(static_cast<uint32_t>(264), "MouseWheelUp");
  DxScanCode.Set(static_cast<uint32_t>(265), "MouseWheelDown");
  DxScanCode.Set("None", Napi::Number::New(env, 0));
  DxScanCode.Set("Escape", Napi::Number::New(env, 1));
  DxScanCode.Set("N1", Napi::Number::New(env, 2));
  DxScanCode.Set("N2", Napi::Number::New(env, 3));
  DxScanCode.Set("N3", Napi::Number::New(env, 4));
  DxScanCode.Set("N4", Napi::Number::New(env, 5));
  DxScanCode.Set("N5", Napi::Number::New(env, 6));
  DxScanCode.Set("N6", Napi::Number::New(env, 7));
  DxScanCode.Set("N7", Napi::Number::New(env, 8));
  DxScanCode.Set("N8", Napi::Number::New(env, 9));
  DxScanCode.Set("N9", Napi::Number::New(env, 10));
  DxScanCode.Set("N0", Napi::Number::New(env, 11));
  DxScanCode.Set("Minus", Napi::Number::New(env, 12));
  DxScanCode.Set("Equals", Napi::Number::New(env, 13));
  DxScanCode.Set("Backspace", Napi::Number::New(env, 14));
  DxScanCode.Set("Tab", Napi::Number::New(env, 15));
  DxScanCode.Set("Q", Napi::Number::New(env, 16));
  DxScanCode.Set("W", Napi::Number::New(env, 17));
  DxScanCode.Set("E", Napi::Number::New(env, 18));
  DxScanCode.Set("R", Napi::Number::New(env, 19));
  DxScanCode.Set("T", Napi::Number::New(env, 20));
  DxScanCode.Set("Y", Napi::Number::New(env, 21));
  DxScanCode.Set("U", Napi::Number::New(env, 22));
  DxScanCode.Set("I", Napi::Number::New(env, 23));
  DxScanCode.Set("O", Napi::Number::New(env, 24));
  DxScanCode.Set("P", Napi::Number::New(env, 25));
  DxScanCode.Set("LeftBracket", Napi::Number::New(env, 26));
  DxScanCode.Set("RightBracket", Napi::Number::New(env, 27));
  DxScanCode.Set("Enter", Napi::Number::New(env, 28));
  DxScanCode.Set("LeftControl", Napi::Number::New(env, 29));
  DxScanCode.Set("A", Napi::Number::New(env, 30));
  DxScanCode.Set("S", Napi::Number::New(env, 31));
  DxScanCode.Set("D", Napi::Number::New(env, 32));
  DxScanCode.Set("F", Napi::Number::New(env, 33));
  DxScanCode.Set("G", Napi::Number::New(env, 34));
  DxScanCode.Set("H", Napi::Number::New(env, 35));
  DxScanCode.Set("J", Napi::Number::New(env, 36));
  DxScanCode.Set("K", Napi::Number::New(env, 37));
  DxScanCode.Set("L", Napi::Number::New(env, 38));
  DxScanCode.Set("Semicolon", Napi::Number::New(env, 39));
  DxScanCode.Set("Apostrophe", Napi::Number::New(env, 40));
  DxScanCode.Set("Console", Napi::Number::New(env, 41));
  DxScanCode.Set("LeftShift", Napi::Number::New(env, 42));
  DxScanCode.Set("BackSlash", Napi::Number::New(env, 43));
  DxScanCode.Set("Z", Napi::Number::New(env, 44));
  DxScanCode.Set("X", Napi::Number::New(env, 45));
  DxScanCode.Set("C", Napi::Number::New(env, 46));
  DxScanCode.Set("V", Napi::Number::New(env, 47));
  DxScanCode.Set("B", Napi::Number::New(env, 48));
  DxScanCode.Set("N", Napi::Number::New(env, 49));
  DxScanCode.Set("M", Napi::Number::New(env, 50));
  DxScanCode.Set("Comma", Napi::Number::New(env, 51));
  DxScanCode.Set("Period", Napi::Number::New(env, 52));
  DxScanCode.Set("ForwardSlash", Napi::Number::New(env, 53));
  DxScanCode.Set("RightShift", Napi::Number::New(env, 54));
  DxScanCode.Set("NumMult", Napi::Number::New(env, 55));
  DxScanCode.Set("LeftAlt", Napi::Number::New(env, 56));
  DxScanCode.Set("Spacebar", Napi::Number::New(env, 57));
  DxScanCode.Set("CapsLock", Napi::Number::New(env, 58));
  DxScanCode.Set("F1", Napi::Number::New(env, 59));
  DxScanCode.Set("F2", Napi::Number::New(env, 60));
  DxScanCode.Set("F3", Napi::Number::New(env, 61));
  DxScanCode.Set("F4", Napi::Number::New(env, 62));
  DxScanCode.Set("F5", Napi::Number::New(env, 63));
  DxScanCode.Set("F6", Napi::Number::New(env, 64));
  DxScanCode.Set("F7", Napi::Number::New(env, 65));
  DxScanCode.Set("F8", Napi::Number::New(env, 66));
  DxScanCode.Set("F9", Napi::Number::New(env, 67));
  DxScanCode.Set("F10", Napi::Number::New(env, 68));
  DxScanCode.Set("NumLock", Napi::Number::New(env, 69));
  DxScanCode.Set("ScrollLock", Napi::Number::New(env, 70));
  DxScanCode.Set("Num7", Napi::Number::New(env, 71));
  DxScanCode.Set("Num8", Napi::Number::New(env, 72));
  DxScanCode.Set("Num9", Napi::Number::New(env, 73));
  DxScanCode.Set("NumMinus", Napi::Number::New(env, 74));
  DxScanCode.Set("Num4", Napi::Number::New(env, 75));
  DxScanCode.Set("Num5", Napi::Number::New(env, 76));
  DxScanCode.Set("Num6", Napi::Number::New(env, 77));
  DxScanCode.Set("NumPlus", Napi::Number::New(env, 78));
  DxScanCode.Set("Num1", Napi::Number::New(env, 79));
  DxScanCode.Set("Num2", Napi::Number::New(env, 80));
  DxScanCode.Set("Num3", Napi::Number::New(env, 81));
  DxScanCode.Set("Num0", Napi::Number::New(env, 82));
  DxScanCode.Set("NumDot", Napi::Number::New(env, 83));
  DxScanCode.Set("F11", Napi::Number::New(env, 87));
  DxScanCode.Set("F12", Napi::Number::New(env, 88));
  DxScanCode.Set("NumEnter", Napi::Number::New(env, 156));
  DxScanCode.Set("RightControl", Napi::Number::New(env, 157));
  DxScanCode.Set("NumSlash", Napi::Number::New(env, 181));
  DxScanCode.Set("SysRqPtrScr", Napi::Number::New(env, 183));
  DxScanCode.Set("RightAlt", Napi::Number::New(env, 184));
  DxScanCode.Set("Pause", Napi::Number::New(env, 197));
  DxScanCode.Set("Home", Napi::Number::New(env, 199));
  DxScanCode.Set("UpArrow", Napi::Number::New(env, 200));
  DxScanCode.Set("PgUp", Napi::Number::New(env, 201));
  DxScanCode.Set("LeftArrow", Napi::Number::New(env, 203));
  DxScanCode.Set("RightArrow", Napi::Number::New(env, 205));
  DxScanCode.Set("End", Napi::Number::New(env, 207));
  DxScanCode.Set("DownArrow", Napi::Number::New(env, 208));
  DxScanCode.Set("PgDown", Napi::Number::New(env, 209));
  DxScanCode.Set("Insert", Napi::Number::New(env, 210));
  DxScanCode.Set("Delete", Napi::Number::New(env, 211));
  DxScanCode.Set("LeftMouseButton", Napi::Number::New(env, 256));
  DxScanCode.Set("RightMouseButton", Napi::Number::New(env, 257));
  DxScanCode.Set("MiddleMouseButton", Napi::Number::New(env, 258));
  DxScanCode.Set("MouseButton3", Napi::Number::New(env, 259));
  DxScanCode.Set("MouseButton4", Napi::Number::New(env, 260));
  DxScanCode.Set("MouseButton5", Napi::Number::New(env, 261));
  DxScanCode.Set("MouseButton6", Napi::Number::New(env, 262));
  DxScanCode.Set("MouseButton7", Napi::Number::New(env, 263));
  DxScanCode.Set("MouseWheelUp", Napi::Number::New(env, 264));
  DxScanCode.Set("MouseWheelDown", Napi::Number::New(env, 265));
  exports.Set("DxScanCode", DxScanCode);

  auto FormType = Napi::Object::New(env);
  FormType.Set(static_cast<uint32_t>(83), "ANIO");
  FormType.Set(static_cast<uint32_t>(102), "ARMA");
  FormType.Set(static_cast<uint32_t>(16), "AcousticSpace");
  FormType.Set(static_cast<uint32_t>(6), "Action");
  FormType.Set(static_cast<uint32_t>(24), "Activator");
  FormType.Set(static_cast<uint32_t>(95), "ActorValueInfo");
  FormType.Set(static_cast<uint32_t>(94), "AddonNode");
  FormType.Set(static_cast<uint32_t>(42), "Ammo");
  FormType.Set(static_cast<uint32_t>(33), "Apparatus");
  FormType.Set(static_cast<uint32_t>(26), "Armor");
  FormType.Set(static_cast<uint32_t>(64), "ArrowProjectile");
  FormType.Set(static_cast<uint32_t>(125), "Art");
  FormType.Set(static_cast<uint32_t>(123), "AssociationType");
  FormType.Set(static_cast<uint32_t>(69), "BarrierProjectile");
  FormType.Set(static_cast<uint32_t>(66), "BeamProjectile");
  FormType.Set(static_cast<uint32_t>(93), "BodyPartData");
  FormType.Set(static_cast<uint32_t>(27), "Book");
  FormType.Set(static_cast<uint32_t>(97), "CameraPath");
  FormType.Set(static_cast<uint32_t>(96), "CameraShot");
  FormType.Set(static_cast<uint32_t>(60), "Cell");
  FormType.Set(static_cast<uint32_t>(62), "Character");
  FormType.Set(static_cast<uint32_t>(10), "Class");
  FormType.Set(static_cast<uint32_t>(55), "Climate");
  FormType.Set(static_cast<uint32_t>(132), "CollisionLayer");
  FormType.Set(static_cast<uint32_t>(133), "ColorForm");
  FormType.Set(static_cast<uint32_t>(80), "CombatStyle");
  FormType.Set(static_cast<uint32_t>(68), "ConeProjectile");
  FormType.Set(static_cast<uint32_t>(49), "ConstructibleObject");
  FormType.Set(static_cast<uint32_t>(28), "Container");
  FormType.Set(static_cast<uint32_t>(117), "DLVW");
  FormType.Set(static_cast<uint32_t>(88), "Debris");
  FormType.Set(static_cast<uint32_t>(107), "DefaultObject");
  FormType.Set(static_cast<uint32_t>(115), "DialogueBranch");
  FormType.Set(static_cast<uint32_t>(29), "Door");
  FormType.Set(static_cast<uint32_t>(129), "DualCastData");
  FormType.Set(static_cast<uint32_t>(18), "EffectSetting");
  FormType.Set(static_cast<uint32_t>(85), "EffectShader");
  FormType.Set(static_cast<uint32_t>(21), "Enchantment");
  FormType.Set(static_cast<uint32_t>(103), "EncounterZone");
  FormType.Set(static_cast<uint32_t>(120), "EquipSlot");
  FormType.Set(static_cast<uint32_t>(87), "Explosion");
  FormType.Set(static_cast<uint32_t>(13), "Eyes");
  FormType.Set(static_cast<uint32_t>(11), "Faction");
  FormType.Set(static_cast<uint32_t>(67), "FlameProjectile");
  FormType.Set(static_cast<uint32_t>(39), "Flora");
  FormType.Set(static_cast<uint32_t>(110), "Footstep");
  FormType.Set(static_cast<uint32_t>(111), "FootstepSet");
  FormType.Set(static_cast<uint32_t>(40), "Furniture");
  FormType.Set(static_cast<uint32_t>(3), "GMST");
  FormType.Set(static_cast<uint32_t>(9), "Global");
  FormType.Set(static_cast<uint32_t>(37), "Grass");
  FormType.Set(static_cast<uint32_t>(65), "GrenadeProjectile");
  FormType.Set(static_cast<uint32_t>(2), "Group");
  FormType.Set(static_cast<uint32_t>(51), "Hazard");
  FormType.Set(static_cast<uint32_t>(12), "HeadPart");
  FormType.Set(static_cast<uint32_t>(78), "Idle");
  FormType.Set(static_cast<uint32_t>(47), "IdleMarker");
  FormType.Set(static_cast<uint32_t>(89), "ImageSpace");
  FormType.Set(static_cast<uint32_t>(90), "ImageSpaceModifier");
  FormType.Set(static_cast<uint32_t>(100), "ImpactData");
  FormType.Set(static_cast<uint32_t>(101), "ImpactDataSet");
  FormType.Set(static_cast<uint32_t>(30), "Ingredient");
  FormType.Set(static_cast<uint32_t>(45), "Key");
  FormType.Set(static_cast<uint32_t>(4), "Keyword");
  FormType.Set(static_cast<uint32_t>(72), "Land");
  FormType.Set(static_cast<uint32_t>(20), "LandTexture");
  FormType.Set(static_cast<uint32_t>(44), "LeveledCharacter");
  FormType.Set(static_cast<uint32_t>(53), "LeveledItem");
  FormType.Set(static_cast<uint32_t>(82), "LeveledSpell");
  FormType.Set(static_cast<uint32_t>(31), "Light");
  FormType.Set(static_cast<uint32_t>(108), "LightingTemplate");
  FormType.Set(static_cast<uint32_t>(91), "List");
  FormType.Set(static_cast<uint32_t>(81), "LoadScreen");
  FormType.Set(static_cast<uint32_t>(104), "Location");
  FormType.Set(static_cast<uint32_t>(5), "LocationRef");
  FormType.Set(static_cast<uint32_t>(126), "Material");
  FormType.Set(static_cast<uint32_t>(99), "MaterialType");
  FormType.Set(static_cast<uint32_t>(8), "MenuIcon");
  FormType.Set(static_cast<uint32_t>(105), "Message");
  FormType.Set(static_cast<uint32_t>(32), "Misc");
  FormType.Set(static_cast<uint32_t>(63), "MissileProjectile");
  FormType.Set(static_cast<uint32_t>(36), "MovableStatic");
  FormType.Set(static_cast<uint32_t>(127), "MovementType");
  FormType.Set(static_cast<uint32_t>(116), "MusicTrack");
  FormType.Set(static_cast<uint32_t>(109), "MusicType");
  FormType.Set(static_cast<uint32_t>(59), "NAVI");
  FormType.Set(static_cast<uint32_t>(43), "NPC");
  FormType.Set(static_cast<uint32_t>(73), "NavMesh");
  FormType.Set(static_cast<uint32_t>(0), "None");
  FormType.Set(static_cast<uint32_t>(48), "Note");
  FormType.Set(static_cast<uint32_t>(124), "Outfit");
  FormType.Set(static_cast<uint32_t>(70), "PHZD");
  FormType.Set(static_cast<uint32_t>(79), "Package");
  FormType.Set(static_cast<uint32_t>(92), "Perk");
  FormType.Set(static_cast<uint32_t>(46), "Potion");
  FormType.Set(static_cast<uint32_t>(50), "Projectile");
  FormType.Set(static_cast<uint32_t>(77), "Quest");
  FormType.Set(static_cast<uint32_t>(14), "Race");
  FormType.Set(static_cast<uint32_t>(106), "Ragdoll");
  FormType.Set(static_cast<uint32_t>(61), "Reference");
  FormType.Set(static_cast<uint32_t>(57), "ReferenceEffect");
  FormType.Set(static_cast<uint32_t>(58), "Region");
  FormType.Set(static_cast<uint32_t>(121), "Relationship");
  FormType.Set(static_cast<uint32_t>(134), "ReverbParam");
  FormType.Set(static_cast<uint32_t>(122), "Scene");
  FormType.Set(static_cast<uint32_t>(19), "Script");
  FormType.Set(static_cast<uint32_t>(23), "ScrollItem");
  FormType.Set(static_cast<uint32_t>(56), "ShaderParticleGeometryData");
  FormType.Set(static_cast<uint32_t>(119), "Shout");
  FormType.Set(static_cast<uint32_t>(17), "Skill");
  FormType.Set(static_cast<uint32_t>(52), "SoulGem");
  FormType.Set(static_cast<uint32_t>(15), "Sound");
  FormType.Set(static_cast<uint32_t>(130), "SoundCategory");
  FormType.Set(static_cast<uint32_t>(128), "SoundDescriptor");
  FormType.Set(static_cast<uint32_t>(131), "SoundOutput");
  FormType.Set(static_cast<uint32_t>(22), "Spell");
  FormType.Set(static_cast<uint32_t>(34), "Static");
  FormType.Set(static_cast<uint32_t>(35), "StaticCollection");
  FormType.Set(static_cast<uint32_t>(112), "StoryBranchNode");
  FormType.Set(static_cast<uint32_t>(114), "StoryEventNode");
  FormType.Set(static_cast<uint32_t>(113), "StoryQuestNode");
  FormType.Set(static_cast<uint32_t>(1), "TES4");
  FormType.Set(static_cast<uint32_t>(74), "TLOD");
  FormType.Set(static_cast<uint32_t>(86), "TOFT");
  FormType.Set(static_cast<uint32_t>(25), "TalkingActivator");
  FormType.Set(static_cast<uint32_t>(7), "TextureSet");
  FormType.Set(static_cast<uint32_t>(75), "Topic");
  FormType.Set(static_cast<uint32_t>(76), "TopicInfo");
  FormType.Set(static_cast<uint32_t>(38), "Tree");
  FormType.Set(static_cast<uint32_t>(98), "VoiceType");
  FormType.Set(static_cast<uint32_t>(84), "Water");
  FormType.Set(static_cast<uint32_t>(41), "Weapon");
  FormType.Set(static_cast<uint32_t>(54), "Weather");
  FormType.Set(static_cast<uint32_t>(118), "WordOfPower");
  FormType.Set(static_cast<uint32_t>(71), "WorldSpace");
  FormType.Set("ANIO", Napi::Number::New(env, 83));
  FormType.Set("ARMA", Napi::Number::New(env, 102));
  FormType.Set("AcousticSpace", Napi::Number::New(env, 16));
  FormType.Set("Action", Napi::Number::New(env, 6));
  FormType.Set("Activator", Napi::Number::New(env, 24));
  FormType.Set("ActorValueInfo", Napi::Number::New(env, 95));
  FormType.Set("AddonNode", Napi::Number::New(env, 94));
  FormType.Set("Ammo", Napi::Number::New(env, 42));
  FormType.Set("Apparatus", Napi::Number::New(env, 33));
  FormType.Set("Armor", Napi::Number::New(env, 26));
  FormType.Set("ArrowProjectile", Napi::Number::New(env, 64));
  FormType.Set("Art", Napi::Number::New(env, 125));
  FormType.Set("AssociationType", Napi::Number::New(env, 123));
  FormType.Set("BarrierProjectile", Napi::Number::New(env, 69));
  FormType.Set("BeamProjectile", Napi::Number::New(env, 66));
  FormType.Set("BodyPartData", Napi::Number::New(env, 93));
  FormType.Set("Book", Napi::Number::New(env, 27));
  FormType.Set("CameraPath", Napi::Number::New(env, 97));
  FormType.Set("CameraShot", Napi::Number::New(env, 96));
  FormType.Set("Cell", Napi::Number::New(env, 60));
  FormType.Set("Character", Napi::Number::New(env, 62));
  FormType.Set("Class", Napi::Number::New(env, 10));
  FormType.Set("Climate", Napi::Number::New(env, 55));
  FormType.Set("CollisionLayer", Napi::Number::New(env, 132));
  FormType.Set("ColorForm", Napi::Number::New(env, 133));
  FormType.Set("CombatStyle", Napi::Number::New(env, 80));
  FormType.Set("ConeProjectile", Napi::Number::New(env, 68));
  FormType.Set("ConstructibleObject", Napi::Number::New(env, 49));
  FormType.Set("Container", Napi::Number::New(env, 28));
  FormType.Set("DLVW", Napi::Number::New(env, 117));
  FormType.Set("Debris", Napi::Number::New(env, 88));
  FormType.Set("DefaultObject", Napi::Number::New(env, 107));
  FormType.Set("DialogueBranch", Napi::Number::New(env, 115));
  FormType.Set("Door", Napi::Number::New(env, 29));
  FormType.Set("DualCastData", Napi::Number::New(env, 129));
  FormType.Set("EffectSetting", Napi::Number::New(env, 18));
  FormType.Set("EffectShader", Napi::Number::New(env, 85));
  FormType.Set("Enchantment", Napi::Number::New(env, 21));
  FormType.Set("EncounterZone", Napi::Number::New(env, 103));
  FormType.Set("EquipSlot", Napi::Number::New(env, 120));
  FormType.Set("Explosion", Napi::Number::New(env, 87));
  FormType.Set("Eyes", Napi::Number::New(env, 13));
  FormType.Set("Faction", Napi::Number::New(env, 11));
  FormType.Set("FlameProjectile", Napi::Number::New(env, 67));
  FormType.Set("Flora", Napi::Number::New(env, 39));
  FormType.Set("Footstep", Napi::Number::New(env, 110));
  FormType.Set("FootstepSet", Napi::Number::New(env, 111));
  FormType.Set("Furniture", Napi::Number::New(env, 40));
  FormType.Set("GMST", Napi::Number::New(env, 3));
  FormType.Set("Global", Napi::Number::New(env, 9));
  FormType.Set("Grass", Napi::Number::New(env, 37));
  FormType.Set("GrenadeProjectile", Napi::Number::New(env, 65));
  FormType.Set("Group", Napi::Number::New(env, 2));
  FormType.Set("Hazard", Napi::Number::New(env, 51));
  FormType.Set("HeadPart", Napi::Number::New(env, 12));
  FormType.Set("Idle", Napi::Number::New(env, 78));
  FormType.Set("IdleMarker", Napi::Number::New(env, 47));
  FormType.Set("ImageSpace", Napi::Number::New(env, 89));
  FormType.Set("ImageSpaceModifier", Napi::Number::New(env, 90));
  FormType.Set("ImpactData", Napi::Number::New(env, 100));
  FormType.Set("ImpactDataSet", Napi::Number::New(env, 101));
  FormType.Set("Ingredient", Napi::Number::New(env, 30));
  FormType.Set("Key", Napi::Number::New(env, 45));
  FormType.Set("Keyword", Napi::Number::New(env, 4));
  FormType.Set("Land", Napi::Number::New(env, 72));
  FormType.Set("LandTexture", Napi::Number::New(env, 20));
  FormType.Set("LeveledCharacter", Napi::Number::New(env, 44));
  FormType.Set("LeveledItem", Napi::Number::New(env, 53));
  FormType.Set("LeveledSpell", Napi::Number::New(env, 82));
  FormType.Set("Light", Napi::Number::New(env, 31));
  FormType.Set("LightingTemplate", Napi::Number::New(env, 108));
  FormType.Set("List", Napi::Number::New(env, 91));
  FormType.Set("LoadScreen", Napi::Number::New(env, 81));
  FormType.Set("Location", Napi::Number::New(env, 104));
  FormType.Set("LocationRef", Napi::Number::New(env, 5));
  FormType.Set("Material", Napi::Number::New(env, 126));
  FormType.Set("MaterialType", Napi::Number::New(env, 99));
  FormType.Set("MenuIcon", Napi::Number::New(env, 8));
  FormType.Set("Message", Napi::Number::New(env, 105));
  FormType.Set("Misc", Napi::Number::New(env, 32));
  FormType.Set("MissileProjectile", Napi::Number::New(env, 63));
  FormType.Set("MovableStatic", Napi::Number::New(env, 36));
  FormType.Set("MovementType", Napi::Number::New(env, 127));
  FormType.Set("MusicTrack", Napi::Number::New(env, 116));
  FormType.Set("MusicType", Napi::Number::New(env, 109));
  FormType.Set("NAVI", Napi::Number::New(env, 59));
  FormType.Set("NPC", Napi::Number::New(env, 43));
  FormType.Set("NavMesh", Napi::Number::New(env, 73));
  FormType.Set("None", Napi::Number::New(env, 0));
  FormType.Set("Note", Napi::Number::New(env, 48));
  FormType.Set("Outfit", Napi::Number::New(env, 124));
  FormType.Set("PHZD", Napi::Number::New(env, 70));
  FormType.Set("Package", Napi::Number::New(env, 79));
  FormType.Set("Perk", Napi::Number::New(env, 92));
  FormType.Set("Potion", Napi::Number::New(env, 46));
  FormType.Set("Projectile", Napi::Number::New(env, 50));
  FormType.Set("Quest", Napi::Number::New(env, 77));
  FormType.Set("Race", Napi::Number::New(env, 14));
  FormType.Set("Ragdoll", Napi::Number::New(env, 106));
  FormType.Set("Reference", Napi::Number::New(env, 61));
  FormType.Set("ReferenceEffect", Napi::Number::New(env, 57));
  FormType.Set("Region", Napi::Number::New(env, 58));
  FormType.Set("Relationship", Napi::Number::New(env, 121));
  FormType.Set("ReverbParam", Napi::Number::New(env, 134));
  FormType.Set("Scene", Napi::Number::New(env, 122));
  FormType.Set("Script", Napi::Number::New(env, 19));
  FormType.Set("ScrollItem", Napi::Number::New(env, 23));
  FormType.Set("ShaderParticleGeometryData", Napi::Number::New(env, 56));
  FormType.Set("Shout", Napi::Number::New(env, 119));
  FormType.Set("Skill", Napi::Number::New(env, 17));
  FormType.Set("SoulGem", Napi::Number::New(env, 52));
  FormType.Set("Sound", Napi::Number::New(env, 15));
  FormType.Set("SoundCategory", Napi::Number::New(env, 130));
  FormType.Set("SoundDescriptor", Napi::Number::New(env, 128));
  FormType.Set("SoundOutput", Napi::Number::New(env, 131));
  FormType.Set("Spell", Napi::Number::New(env, 22));
  FormType.Set("Static", Napi::Number::New(env, 34));
  FormType.Set("StaticCollection", Napi::Number::New(env, 35));
  FormType.Set("StoryBranchNode", Napi::Number::New(env, 112));
  FormType.Set("StoryEventNode", Napi::Number::New(env, 114));
  FormType.Set("StoryQuestNode", Napi::Number::New(env, 113));
  FormType.Set("TES4", Napi::Number::New(env, 1));
  FormType.Set("TLOD", Napi::Number::New(env, 74));
  FormType.Set("TOFT", Napi::Number::New(env, 86));
  FormType.Set("TalkingActivator", Napi::Number::New(env, 25));
  FormType.Set("TextureSet", Napi::Number::New(env, 7));
  FormType.Set("Topic", Napi::Number::New(env, 75));
  FormType.Set("TopicInfo", Napi::Number::New(env, 76));
  FormType.Set("Tree", Napi::Number::New(env, 38));
  FormType.Set("VoiceType", Napi::Number::New(env, 98));
  FormType.Set("Water", Napi::Number::New(env, 84));
  FormType.Set("Weapon", Napi::Number::New(env, 41));
  FormType.Set("Weather", Napi::Number::New(env, 54));
  FormType.Set("WordOfPower", Napi::Number::New(env, 118));
  FormType.Set("WorldSpace", Napi::Number::New(env, 71));
  exports.Set("FormType", FormType);

  auto WeaponType = Napi::Object::New(env);
  WeaponType.Set(static_cast<uint32_t>(0), "Fist");
  WeaponType.Set(static_cast<uint32_t>(1), "Sword");
  WeaponType.Set(static_cast<uint32_t>(2), "Dagger");
  WeaponType.Set(static_cast<uint32_t>(3), "WarAxe");
  WeaponType.Set(static_cast<uint32_t>(4), "Mace");
  WeaponType.Set(static_cast<uint32_t>(5), "Greatsword");
  WeaponType.Set(static_cast<uint32_t>(6), "Battleaxe");
  WeaponType.Set(static_cast<uint32_t>(6), "Warhammer");
  WeaponType.Set(static_cast<uint32_t>(7), "Bow");
  WeaponType.Set(static_cast<uint32_t>(8), "Staff");
  WeaponType.Set(static_cast<uint32_t>(9), "Crossbow");
  WeaponType.Set("Fist", Napi::Number::New(env, 0));
  WeaponType.Set("Sword", Napi::Number::New(env, 1));
  WeaponType.Set("Dagger", Napi::Number::New(env, 2));
  WeaponType.Set("WarAxe", Napi::Number::New(env, 3));
  WeaponType.Set("Mace", Napi::Number::New(env, 4));
  WeaponType.Set("Greatsword", Napi::Number::New(env, 5));
  WeaponType.Set("Battleaxe", Napi::Number::New(env, 6));
  WeaponType.Set("Warhammer", Napi::Number::New(env, 6));
  WeaponType.Set("Bow", Napi::Number::New(env, 7));
  WeaponType.Set("Staff", Napi::Number::New(env, 8));
  WeaponType.Set("Crossbow", Napi::Number::New(env, 9));
  exports.Set("WeaponType", WeaponType);

  auto EquippedItemType = Napi::Object::New(env);
  EquippedItemType.Set(static_cast<uint32_t>(0), "Fist");
  EquippedItemType.Set(static_cast<uint32_t>(1), "Sword");
  EquippedItemType.Set(static_cast<uint32_t>(2), "Dagger");
  EquippedItemType.Set(static_cast<uint32_t>(3), "WarAxe");
  EquippedItemType.Set(static_cast<uint32_t>(4), "Mace");
  EquippedItemType.Set(static_cast<uint32_t>(5), "Greatsword");
  EquippedItemType.Set(static_cast<uint32_t>(6), "Battleaxe");
  EquippedItemType.Set(static_cast<uint32_t>(6), "Warhammer");
  EquippedItemType.Set(static_cast<uint32_t>(7), "Bow");
  EquippedItemType.Set(static_cast<uint32_t>(8), "Staff");
  EquippedItemType.Set(static_cast<uint32_t>(9), "Spell");
  EquippedItemType.Set(static_cast<uint32_t>(10), "Shield");
  EquippedItemType.Set(static_cast<uint32_t>(11), "Torch");
  EquippedItemType.Set(static_cast<uint32_t>(12), "Crossbow");
  EquippedItemType.Set("Fist", Napi::Number::New(env, 0));
  EquippedItemType.Set("Sword", Napi::Number::New(env, 1));
  EquippedItemType.Set("Dagger", Napi::Number::New(env, 2));
  EquippedItemType.Set("WarAxe", Napi::Number::New(env, 3));
  EquippedItemType.Set("Mace", Napi::Number::New(env, 4));
  EquippedItemType.Set("Greatsword", Napi::Number::New(env, 5));
  EquippedItemType.Set("Battleaxe", Napi::Number::New(env, 6));
  EquippedItemType.Set("Warhammer", Napi::Number::New(env, 6));
  EquippedItemType.Set("Bow", Napi::Number::New(env, 7));
  EquippedItemType.Set("Staff", Napi::Number::New(env, 8));
  EquippedItemType.Set("Spell", Napi::Number::New(env, 9));
  EquippedItemType.Set("Shield", Napi::Number::New(env, 10));
  EquippedItemType.Set("Torch", Napi::Number::New(env, 11));
  EquippedItemType.Set("Crossbow", Napi::Number::New(env, 12));
  exports.Set("EquippedItemType", EquippedItemType);

  auto SlotMask = Napi::Object::New(env);
  SlotMask.Set(static_cast<uint32_t>(1), "Head");
  SlotMask.Set(static_cast<uint32_t>(2), "Hair");
  SlotMask.Set(static_cast<uint32_t>(4), "Body");
  SlotMask.Set(static_cast<uint32_t>(8), "Hands");
  SlotMask.Set(static_cast<uint32_t>(16), "Forearms");
  SlotMask.Set(static_cast<uint32_t>(32), "Amulet");
  SlotMask.Set(static_cast<uint32_t>(64), "Ring");
  SlotMask.Set(static_cast<uint32_t>(128), "Feet");
  SlotMask.Set(static_cast<uint32_t>(256), "Calves");
  SlotMask.Set(static_cast<uint32_t>(512), "Shield");
  SlotMask.Set(static_cast<uint32_t>(1024), "Tail");
  SlotMask.Set(static_cast<uint32_t>(2048), "LongHair");
  SlotMask.Set(static_cast<uint32_t>(4096), "Circlet");
  SlotMask.Set(static_cast<uint32_t>(8192), "Ears");
  SlotMask.Set(static_cast<uint32_t>(16384), "Face");
  SlotMask.Set(static_cast<uint32_t>(16384), "Mouth");
  SlotMask.Set(static_cast<uint32_t>(32768), "Neck");
  SlotMask.Set(static_cast<uint32_t>(65536), "ChestOuter");
  SlotMask.Set(static_cast<uint32_t>(65536), "ChestPrimary");
  SlotMask.Set(static_cast<uint32_t>(131072), "Back");
  SlotMask.Set(static_cast<uint32_t>(262144), "Misc01");
  SlotMask.Set(static_cast<uint32_t>(524288), "PelvisOuter");
  SlotMask.Set(static_cast<uint32_t>(524288), "PelvisPrimary");
  SlotMask.Set(static_cast<uint32_t>(1048576), "DecapitateHead");
  SlotMask.Set(static_cast<uint32_t>(2097152), "Decapitate");
  SlotMask.Set(static_cast<uint32_t>(4194304), "PelvisUnder");
  SlotMask.Set(static_cast<uint32_t>(4194304), "PelvisSecondary");
  SlotMask.Set(static_cast<uint32_t>(8388608), "LegOuter");
  SlotMask.Set(static_cast<uint32_t>(8388608), "LegPrimary");
  SlotMask.Set(static_cast<uint32_t>(16777216), "LegUnder");
  SlotMask.Set(static_cast<uint32_t>(16777216), "LegSecondary");
  SlotMask.Set(static_cast<uint32_t>(33554432), "FaceAlt");
  SlotMask.Set(static_cast<uint32_t>(33554432), "Jewelry");
  SlotMask.Set(static_cast<uint32_t>(67108864), "ChestUnder");
  SlotMask.Set(static_cast<uint32_t>(67108864), "ChestSecondary");
  SlotMask.Set(static_cast<uint32_t>(134217728), "Shoulder");
  SlotMask.Set(static_cast<uint32_t>(268435456), "ArmUnder");
  SlotMask.Set(static_cast<uint32_t>(268435456), "ArmSecondary");
  SlotMask.Set(static_cast<uint32_t>(268435456), "ArmLeft");
  SlotMask.Set(static_cast<uint32_t>(536870912), "ArmOuter");
  SlotMask.Set(static_cast<uint32_t>(536870912), "ArmPrimary");
  SlotMask.Set(static_cast<uint32_t>(536870912), "ArmRight");
  SlotMask.Set(static_cast<uint32_t>(1073741824), "Misc02");
  SlotMask.Set(
    static_cast<uint32_t>(jsEngine->RunScript("2147483648", "_.js")), "FX01");
  SlotMask.Set("Head", Napi::Number::New(env, 1));
  SlotMask.Set("Hair", Napi::Number::New(env, 2));
  SlotMask.Set("Body", Napi::Number::New(env, 4));
  SlotMask.Set("Hands", Napi::Number::New(env, 8));
  SlotMask.Set("Forearms", Napi::Number::New(env, 16));
  SlotMask.Set("Amulet", Napi::Number::New(env, 32));
  SlotMask.Set("Ring", Napi::Number::New(env, 64));
  SlotMask.Set("Feet", Napi::Number::New(env, 128));
  SlotMask.Set("Calves", Napi::Number::New(env, 256));
  SlotMask.Set("Shield", Napi::Number::New(env, 512));
  SlotMask.Set("Tail", Napi::Number::New(env, 1024));
  SlotMask.Set("LongHair", Napi::Number::New(env, 2048));
  SlotMask.Set("Circlet", Napi::Number::New(env, 4096));
  SlotMask.Set("Ears", Napi::Number::New(env, 8192));
  SlotMask.Set("Face", Napi::Number::New(env, 16384));
  SlotMask.Set("Mouth", Napi::Number::New(env, 16384));
  SlotMask.Set("Neck", Napi::Number::New(env, 32768));
  SlotMask.Set("ChestOuter", Napi::Number::New(env, 65536));
  SlotMask.Set("ChestPrimary", Napi::Number::New(env, 65536));
  SlotMask.Set("Back", Napi::Number::New(env, 131072));
  SlotMask.Set("Misc01", Napi::Number::New(env, 262144));
  SlotMask.Set("PelvisOuter", Napi::Number::New(env, 524288));
  SlotMask.Set("PelvisPrimary", Napi::Number::New(env, 524288));
  SlotMask.Set("DecapitateHead", Napi::Number::New(env, 1048576));
  SlotMask.Set("Decapitate", Napi::Number::New(env, 2097152));
  SlotMask.Set("PelvisUnder", Napi::Number::New(env, 4194304));
  SlotMask.Set("PelvisSecondary", Napi::Number::New(env, 4194304));
  SlotMask.Set("LegOuter", Napi::Number::New(env, 8388608));
  SlotMask.Set("LegPrimary", Napi::Number::New(env, 8388608));
  SlotMask.Set("LegUnder", Napi::Number::New(env, 16777216));
  SlotMask.Set("LegSecondary", Napi::Number::New(env, 16777216));
  SlotMask.Set("FaceAlt", Napi::Number::New(env, 33554432));
  SlotMask.Set("Jewelry", Napi::Number::New(env, 33554432));
  SlotMask.Set("ChestUnder", Napi::Number::New(env, 67108864));
  SlotMask.Set("ChestSecondary", Napi::Number::New(env, 67108864));
  SlotMask.Set("Shoulder", Napi::Number::New(env, 134217728));
  SlotMask.Set("ArmUnder", Napi::Number::New(env, 268435456));
  SlotMask.Set("ArmSecondary", Napi::Number::New(env, 268435456));
  SlotMask.Set("ArmLeft", Napi::Number::New(env, 268435456));
  SlotMask.Set("ArmOuter", Napi::Number::New(env, 536870912));
  SlotMask.Set("ArmPrimary", Napi::Number::New(env, 536870912));
  SlotMask.Set("ArmRight", Napi::Number::New(env, 536870912));
  SlotMask.Set("Misc02", Napi::Number::New(env, 1073741824));
  SlotMask.Set(
    "FX01", Napi::Number::New(env, jsEngine->RunScript("2147483648", "_.js")));
  exports.Set("SlotMask", SlotMask);

  auto SpriteEffects = Napi::Object::New(env);
  SpriteEffects.Set(static_cast<uint32_t>(0), "None");
  SpriteEffects.Set(static_cast<uint32_t>(1), "FlipHorizontally");
  SpriteEffects.Set(static_cast<uint32_t>(2), "FlipVertically");
  SpriteEffects.Set("None", Napi::Number::New(env, 0));
  SpriteEffects.Set("FlipHorizontally", Napi::Number::New(env, 1));
  SpriteEffects.Set("FlipVertically", Napi::Number::New(env, 2));
  exports.Set("SpriteEffects", SpriteEffects);
}
